/*
   Copyright 2020 Demetrius J Nekos
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

vec4 myEffect0(in vec2 fragCoord, in vec2 resolution)
{
    //return vec4(1,0,0,1); // red
    //R - horz
    //G - vert
    //B
    //A
    //return vec4(fragCoord / resolution,0,1); // fun spectrum

	//return vec4(fragCoord / resolution,fragCoord); // fun blues
    
    //return vec4(fragCoord / resolution,fragCoord/ resolution); //funky green/purp
        
    return vec4(fragCoord / resolution,0,1); // final Effect0
}

vec4 myEffect1(in vec2 fragCoord)
{
    float square_size = 15.0f; // size of checker square
    
    float checkerx = mod(floor(fragCoord.x / square_size),2.0f); // get color value of x
    float checkery = mod(floor(fragCoord.y / square_size),2.0f); // get color value of y
	float color = mod(checkerx+checkery,2.0f); // use sum to find final color value
	
    return vec4(color,color, color,color); // return color
}

vec4 myEffect2(in vec2 fragCoord, in vec2 resolution)
{
    //credit to https://www.youtube.com/watch?v=9oYssHkOn0I for snippets of some code
   
    float radius = (resolution.y / 3.0); // resolution dependant size of circle
    float c_length = length(fragCoord.xy - vec2(resolution.xy / 2.0)); // get length from point to center of circle
    
    /* eclipse
    float circle = (step(radius, c_length) == 0.0) ? 0.0 : radius / c_length; 
    return vec4(vec3(circle),1.0); // fun sun 
    */  
    vec3 circle = (step(radius, c_length) == 0.0) ?
        vec3(c_length/radius) / 3.75 : vec3(0.0); // determine if point falls within the circle and set color

    return vec4(circle.x*4.0,circle.y*3.0,circle.z*5.0,1.0); // return, with color adjustments   
}

vec4 myEffectMouse(in vec2 fragCoord, in vec2 resolution, in vec2 mouse, in float time)
{
    //credit to https://www.youtube.com/watch?v=9oYssHkOn0I for snippets of some code
   
    float radius = resolution.y / 6.0+20.0*sin(time); // same as before but with time adjusting radius
    float c_length = length(fragCoord.xy - mouse); // gets length from point to mouse
    
    // eclipse
    //float circle = (step(radius, c_length) == 0.0) ? 0.0 : radius / c_length;
    float circle = (step(radius, c_length) == 0.0) ? radius / c_length : 0.0; // know if in circle
    return vec4(vec3(circle),1.0); // return 'spotlight' effect   
}
vec4 trippyEffect0(in vec2 fragCoord, in vec2 resolution, in float time)
{ //takes Effect0 and makes it wacky
    vec4 E0 = myEffect0(fragCoord,resolution); // gets gradient from myEffect0
    return normalize(vec4(E0.x*cos(time*5.0), E0.y*tan(time*1.5),
                          E0.y*sin(time*3.0),1.0)); // return E0, adjusted by time
}
vec4 myEffect3(in vec2 fragCoord, in vec2 resolution, in vec2 mouse, in float time)
{
    //basically combines other effects for a final effect
    return (myEffectMouse(fragCoord,resolution,mouse,time) * 
            trippyEffect0(fragCoord, resolution, time))
        - myEffect1(fragCoord);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // R, G, B, A => [0,1]
    
    //fragColor = myEffect0(fragCoord,iResolution.xy); 					// Effect0
    //fragColor = myEffect1(fragCoord); 								// Effect1
    //fragColor = myEffect2(fragCoord,iResolution.xy); 					// Effect2
	//fragColor = myEffectMouse(fragCoord,iResolution.xy,iMouse.xy);
    fragColor = myEffect3(fragCoord,iResolution.xy,iMouse.xy,iTime); 	// Effect3
    //3 uses mouse
    
    
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
}
vec4 myEffect0(in vec2 fragCoord, in vec2 resolution)
{
    //return vec4(1,0,0,1); // red
    //R - horz
    //G - vert
    //B
    //A
    //return vec4(fragCoord / resolution,0,1); // fun spectrum

	//return vec4(fragCoord / resolution,fragCoord); // fun blues
    
    //return vec4(fragCoord / resolution,fragCoord/ resolution); //funky green/purp
        
    return vec4(fragCoord / resolution,0,1); // final Effect0
}

vec4 myEffect1(in vec2 fragCoord)
{
    float square_size = 15.0f;
    
    float checkerx = mod(floor(fragCoord.x / square_size),2.0f);
    float checkery = mod(floor(fragCoord.y / square_size),2.0f);
	float color = mod(checkerx+checkery,2.0f);
	
    return vec4(color,color, color,color);
}

vec4 myEffect2(in vec2 fragCoord, in vec2 resolution)
{
    //credit to https://www.youtube.com/watch?v=9oYssHkOn0I for snippets of some code
   
    float radius = (resolution.y / 3.0);
    float c_length = length(fragCoord.xy - vec2(resolution.xy / 2.0));
    
    /* eclipse
    float circle = (step(radius, c_length) == 0.0) ? 0.0 : radius / c_length; 
    return vec4(vec3(circle),1.0); // fun sun 
    */  
    vec3 circle = (step(radius, c_length) == 0.0) ? 
        vec3(c_length/radius) / 3.75 : vec3(0.0);

    return vec4(circle.x*4.0,circle.y*3.0,circle.z*5.0,1.0);    
}

vec4 myEffectMouse(in vec2 fragCoord, in vec2 resolution, in vec2 mouse, in float time)
{
    //credit to https://www.youtube.com/watch?v=9oYssHkOn0I for snippets of some code
   
    float radius = resolution.y / 6.0+20.0*sin(time);
    float c_length = length(fragCoord.xy - mouse);
    
    // eclipse
    //float circle = (step(radius, c_length) == 0.0) ? 0.0 : radius / c_length;
    float circle = (step(radius, c_length) == 0.0) ? radius / c_length : 0.0;
    return vec4(vec3(circle),1.0); // fun sun   
}
vec4 trippyEffect0(in vec2 fragCoord, in vec2 resolution, in float time)
{
    vec4 E0 = myEffect0(fragCoord,resolution);
    return normalize(vec4(E0.x*cos(time*5.0), E0.y*tan(time*1.5),
                          E0.y*sin(time*3.0),1.0));
}
vec4 myEffect3(in vec2 fragCoord, in vec2 resolution, in vec2 mouse, in float time)
{
    
    return (myEffectMouse(fragCoord,resolution,mouse,time) * 
            trippyEffect0(fragCoord, resolution, time))
        - myEffect1(fragCoord);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // R, G, B, A => [0,1]
    
    //fragColor = myEffect0(fragCoord,iResolution.xy); 					// Effect0
    //fragColor = myEffect1(fragCoord); 								// Effect1
    //fragColor = myEffect2(fragCoord,iResolution.xy); 					// Effect2
	//fragColor = myEffectMouse(fragCoord,iResolution.xy,iMouse.xy);
    fragColor = myEffect3(fragCoord,iResolution.xy,iMouse.xy,iTime); // Effect3
    //3 uses mouse
    
    
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
}
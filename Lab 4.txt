/*
	Copyright 2020 Dan Buckstein
	Copyright 2020 Demetrius J Nekos
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
		http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN


// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    point: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// sPointLight: hittable sphere struct
//    center: point of origin
//    radius: size of sphere
struct sSphere
{
    vec4 center;
    float radius;
};

// sPointLight: point light struct
//    center:    point of origin
//    color:     color emitted by light
//    intensity: how strong the light is
struct sPointLight
{
    vec4 center;
    vec4 color;
    float intensity; // acts like radius
};


// initSphere: fills out struct, true if valid radius
//    sphere: output struct
//    center: input center point
//    radius: input radius
bool initSphere(out sSphere sphere, in vec3 center, float radius)
{
    sphere.center = asPoint(center); // setting center
    if (radius > 0.0) // spheres can't hav <0 size
    {
        sphere.radius = radius; // setting radius
        return true;
    }
    sphere.radius = 1.0; // default value
    return false;
}

// initPointLight: fills out struct, true if valid radius
//    light:     output struct
//    center:    input center point
//    color:     input light color
//    intensity: input light intensity
bool initPointLight( out sPointLight light,
                    in vec3 center,
                    in vec4 color, float intensity)
{
    light.center = asPoint(center); // setting center
    light.color = color; // setting color
    if (intensity > 0.0) // checks if valid intensity
    {
        light.intensity = intensity; // setting intensity
        return true;
    }
    light.intensity = 1.0; // default intensity
    return false;
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
   
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

// lenSq: calculate the square of length, or the dot of a vector and itself
//    x: vector to be gotten the length of
float lenSq(vec2 x)
{
    return dot(x,x);
}

// calcLighting: calculates Lambertian and Blinn-Phong reflectance, and returns part of the summation of the final color
//    light: the current Point Light
//    position:     point on the sphere that we are drawing
//    normal:       normal vector from point
//    rayOrigin:    input ray origin
//	  viewVector:	vector from point to camera
vec4 calcLighting (in sPointLight light, in vec3 position,
                   in vec3 normal, in vec3 rayOrigin, in vec3 viewVector)
{
    // LAMBERTIAN REFLECTANCE
    vec3 lightVector = light.center.xyz - position; // get vector of position to the light
	float lightLength = length(lightVector); // get length of light vector
    lightVector = lightVector / lightLength; // normalizes vector
   
    float diffuseCoefficient = max(0.0, dot(lightVector, normal)); // get coefficient
   
    float intensityRatio = lightLength/light.intensity; // simplifying attenuation equation by doing this once
    float attenuation = 1.0 / (1.0 + intensityRatio +
                             (intensityRatio * intensityRatio)); // get attenuation
    float Lambertian = diffuseCoefficient * attenuation; // final lambertian

    // BLINN-PHONG REFLECTANCE
    //vec3 reflectedLightVector =reflect(-normalize(lightVector).xyz, normal.xyz); // unneeded for Blinn
   
    float specular = max(0.0,dot(normal, normalize(viewVector + lightVector))); // get base specular coefficient
    specular *= specular; // specularCoefficient^2
    specular *= specular; // specularCoefficient^4
    specular *= specular * specular * specular; // ^16
    specular *= specular * specular * specular; // ^64
    specular *= specular * specular * specular; // ^256 = a
    specular *= 4.0; // Blinn coefficient
   
    return (Lambertian * vec4(normal * 0.5 + 0.5, 1.0) + specular) * light.color;
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin,float time)
{
    // SCENE
    sSphere sphere;
    initSphere(sphere, vec3(0.0,0.0,-4.0), 0.6);
   
    sPointLight lighting[3];
    initPointLight(lighting[0], vec3(1.0 + cos(time),1.5 + sin(time),-2.0),vec4(1.0,1.0,1.0,1.0),4.0);
    initPointLight(lighting[1], vec3(5.0*sin(time),0.0,5.0*cos(time)),vec4(1.0,0.5,0.5,1.0),7.0);
    initPointLight(lighting[2], vec3(-2.0 + 3.0*cos(time),1.5+ 3.0*sin(time),-5.0),vec4(3.0,3.0,7.0,1.0),1.2);

    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy),
               rSq = sphere.radius * sphere.radius;
   
    if (lSq <= rSq)
    {        
        // actually dz_sq for now
        //dp.z = sphere.radius * sphere.radius
        //    - (dp.x * dp.x + dp.y * dp.y);
        dp.z = rSq - lSq;
       
        vec3 position = sphere.center.xyz +
            vec3(dp.x,dp.y, sqrt(dp.z));
        vec3 normal = (position - sphere.center.xyz) / sphere.radius; // radius is length
       
        vec4 sphereColor = vec4(normal * 0.5 + 0.5, 1.0); // use normal map as sphere's color
       
        // LIGHTING
        //geta Lambertian and Binn-Phong lighting for each light, the 'summation' part of the equation
        vec3 viewVector = normalize(rayOrigin.xyz - position.xyz); // unit vector of camera to point

        vec4 totalLighting = calcLighting(lighting[0], position.xyz, // lighting for pointlight 0
                                    normal.xyz, rayOrigin.xyz,viewVector);
        totalLighting += calcLighting(lighting[1], position.xyz, // lighting for pointlight 1
                                    normal.xyz, rayOrigin.xyz,viewVector);
        totalLighting += calcLighting(lighting[2], position.xyz, // lighting for pointlight 2
                                    normal.xyz, rayOrigin.xyz,viewVector);

        vec4 ambient = vec4(0.0, 0.4, 0.4, 1.0); // global ambient
        return ambient * 0.15 + totalLighting;
    }
       
// BACKGROUND
const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
return vec4(mix(warm, cool, rayDirection.y), 1.0);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
   
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                viewportHeight, focalLength,
                fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
   
    fragColor += calcColor(rayDirection, rayOrigin, iTime);
}